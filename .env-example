PGDATABASE=database_name_here



const app = require('../app')
const db = require('../db/connection')
const seed = require('../db/seeds/seed')
const data = require('../db/data/test-data/index')
const request = require('supertest')

afterAll(() => {
    return db.end()
   })

beforeEach(() => {
return seed(data)
})

describe("404: Not Found",()=>{

    test("404: invalid path should return a 404 not found", ()=>{  

        return request(app).get('/api/topicss').expect(404)
    })
})

describe("GET /api/topics",()=>{

    test("200: /api/topics should return all topics available",()=>{

        return request(app).get('/api/topics').expect(200)
        .then(({body})=>{
            expect(body.allTopics.length).toBeGreaterThan(0)
            body.allTopics.forEach((topic)=>{
                expect(topic).toHaveProperty("slug", expect.any(String));
                expect(topic).toHaveProperty("description", expect.any(String));

            })
        })
    })
})

describe("GET /api/articles/:article_id",()=>{

    test("200: should return the article with the specified id",()=>{
        return request(app).get('/api/articles/5').expect(200)
        .then(({body})=>{
            expect(body.article.article_id).toBe(5)
            expect(body.article).toEqual(expect.objectContaining({
                title:"UNCOVERED: catspiracy to bring down democracy",
                topic:"cats",
                author: "rogersop", 
                body:"Bastet walks amongst us, and the cats are taking arms!", 
                created_at:"2020-08-03T13:14:00.000Z",
                votes:0,
                article_img_url:"https://images.pexels.com/photos/158651/news-newsletter-newspaper-information-158651.jpeg?w=700&h=700"
            }))
        })
    })
    test("400: invalid article id should return bad request",()=>{
        return request(app).get('/api/articles/banana').expect(400)
        .then(({body})=>{
            expect(body.msg).toBe("Bad Request")
        })
    })

    test("404: searching for an article that doesnt exist should return not found",()=>{
        return request(app).get('/api/articles/900').expect(404)
        .then(({body})=>{
            expect(body.msg).toBe("No article with id 900 found")
        })
    })
    test("200: should now also have comment count in addition to previous properties",()=>{
        return request(app).get('/api/articles/5').expect(200)
        .then(({body})=>{
            expect(body.article.article_id).toBe(5)
            expect(body.article).toEqual(expect.objectContaining({comment_count:"2"}));

        })
    })
    
})

describe("GET /api",()=>{

    test("200: /api should return an object with descriptions of all valid endpoints",()=>{

        return request(app).get('/api').expect(200)
        .then(({body})=>{
            expect(Object.keys(body).length).toBeGreaterThan(0)
            for(const keys in body){
                expect(typeof body[keys].description).toBe("string")
                expect(Array.isArray(body[keys].queries)).toBe(true)
                expect(typeof body[keys].format).not.toBe("null")
                expect(typeof body[keys].exampleResponse).toBe("object")
            }

        })
    })
})

describe("GET /api/articles/:article_id/comments",()=>{
    
    test("200: /api/articles/:article_id/comments should get all comments for a specific article",()=>{

        return request(app).get('/api/articles/1/comments').expect(200)
        .then(({body})=>{
            expect(body.comments.length).toBe(11)
            expect(body.comments).toBeSortedBy("created_at",{descending:true})
            body.comments.forEach((comment)=>{
                expect(comment).toHaveProperty("comment_id", expect.any(Number));
                expect(comment).toHaveProperty("body", expect.any(String));
                expect(comment).toHaveProperty("article_id", expect.any(Number));
                expect(comment).toHaveProperty("author", expect.any(String));
                expect(comment).toHaveProperty("votes", expect.any(Number));
                expect(comment).toHaveProperty("created_at", expect.any(String));

            })
        })

    })

    test("400: invalid article id should return bad request",()=>{
        return request(app).get('/api/articles/banana/comments').expect(400)
        .then(({body})=>{
            expect(body.msg).toBe("Bad Request")
        })
    })

    test("404: searching for an article that doesnt exist should return not found",()=>{
        return request(app).get('/api/articles/420/comments').expect(404)
        .then(({body})=>{
            expect(body.msg).toBe("No article with id 420 found")
        })
    })
})

describe("GET /api/articles",()=>{

    test("200: /api/articles should return an object with all current articles sorted by date in descending order",()=>{
        return request(app).get('/api/articles').expect(200)
        .then(({body})=>{
            expect(body.articles.length).toBe(13)
            expect(body.articles).toBeSortedBy("created_at",{descending:true})
           body.articles.forEach((article)=>{
            expect(article).toHaveProperty("author", expect.any(String));
            expect(article).toHaveProperty("title", expect.any(String));
            expect(article).toHaveProperty("article_id", expect.any(Number));
            expect(article).toHaveProperty("topic", expect.any(String));
            expect(article).toHaveProperty("created_at", expect.any(String));
            expect(article).toHaveProperty("votes", expect.any(Number));
            expect(article).toHaveProperty("article_img_url", expect.any(String));
            expect(article).toHaveProperty("comment_count", expect.any(String));
            expect(article).not.toHaveProperty("body")
        })
        })
    })

})

describe("GET /api/articles?sort_by=votes / article_id/created_at/comment_count",()=>{

    test("200: /api/articles?sort_by=article_id should return all articles sorted by article_id in descending order",()=>{

        return request(app).get("/api/articles?sort_by=article_id").expect(200)
        .then(({body})=>{
            expect(body.articles).toBeSortedBy("article_id",{descending:true})
        })
    })
    test("200: /api/articles?sort_by=votes should return all articles sorted by votes in descending order",()=>{

        return request(app).get("/api/articles?sort_by=votes").expect(200)
        .then(({body})=>{
            expect(body.articles).toBeSortedBy("votes",{descending:true})
        })
    })
    test("400: /api/articles?sort_by=banana should return a 400 bad request as it is not a valid sort_by",()=>{
        return request(app).get("/api/articles?sort_by=banana").expect(400)
        .then(({body})=>{
            expect(body.msg).toBe("Bad Request invalid sort_by")
        })
    })
})

describe("GET /api/articles?topic=mitch / other topics are available",()=>{
    test("200: /api/articles?topic=mitch should return an array with all articles about the topic mitch",()=>{
        return request(app).get("/api/articles?topic=mitch").expect(200)
        .then(({body})=>{
            expect(body.articles.length).toBe(12)
            body.articles.forEach((article)=>{
                expect(article.topic).toBe("mitch")
            })
        })
    })
    test("404: /api/articles?topic=banana should return a not found if topic does not exist in list of topics",()=>{
        return request(app).get("/api/articles?topic=banana").expect(404)
        .then(({body})=>{
            expect(body.msg).toBe("Not Found")
        })
    })
    test("200: /api/articles?topic=paper should return an empty array as the topic exists but has no content",()=>{
        return request(app).get("/api/articles?topic=paper").expect(200)
        .then(({body})=>{

            expect(body.articles.length).toBe(0)
        })
    })
})

describe("GET /api/articles?order=asc / desc",()=>{
    test("200: /api/articles?order=asc should return all articles in ascending order", ()=>{
        return request(app).get("/api/articles?order=asc").expect(200)
        .then(({body})=>{
            expect(body.articles).toBeSortedBy("created_at",{ascending:true})
        })
    })
    test("400: /api/articles?order=banana should return a 400 bad request as it is not a valid order",()=>{
        return request(app).get("/api/articles?order=banana").expect(400)
        .then(({body})=>{
            expect(body.msg).toBe("Bad Request invalid order")
        })
    })
})

describe("PATCH /api/articles/:article_id",()=>{

    test("200 /api/articles/:article_id should be able to change the vote total of an article",()=>{
       return request(app).patch("/api/articles/2").send({inc_votes: 25}).expect(200)
        .then(({body})=>{

            expect(body.article.article_id).toBe(2)
            expect(body.article.votes).toBe(25)
        })

    })
    test("200 /api/articles/:article_id should be able to change the vote total of an article even if negative",()=>{
        return request(app).patch("/api/articles/2").send({inc_votes: -200}).expect(200)
         .then(({body})=>{
             expect(body.article.article_id).toBe(2)
             expect(body.article.votes).toBe(-200)
         })
 
     })
    test("400 /api/articles/:article_id when given invalid body should return 400 bad request",()=>{
        return request(app).patch("/api/articles/2").send({potato:26}).expect(400)
        .then(({body})=>{
            expect(body.msg).toBe("Bad Request")
        })
    })
    test("400 /api/articles/:article_id when given invalid body should return 400 bad request",()=>{
        return request(app).patch("/api/articles/2").send({inc_votes:"banana"}).expect(400)
        .then(({body})=>{
            expect(body.msg).toBe("Bad Request")
        })
    })
    test("404 /api/articles/:article_id when given article_id is valid but doesnt match any article will return 404 not found",()=>{
        return request(app).patch("/api/articles/420").send({inc_votes:25}).expect(404)
        .then(({body})=>{
            expect(body.msg).toBe("Not Found")
        })
    })
})





describe("POST /api/articles/:article_id/comments",()=>{

    test("201 /api/articles/:article_id/comments should add a comment about a specific article as long as properties are correct",()=>{

        const newComment = {
            username: "rogersop",
            body: "wow this article shows the REAL truth that THE MAN is trying to hide from us"
        }
        return request(app).post("/api/articles/4/comments").send(newComment).expect(201)
        .then(({body})=>{
            expect(body.comment.comment_id).toBe(19)
            expect(body.comment.author).toBe("rogersop")
            expect(body.comment.body).toBe('wow this article shows the REAL truth that THE MAN is trying to hide from us')
            expect(body.comment.article_id).toBe(4)
        })
    })

    test("404 /api/articles/:article_id/comments with non-existent article should give a 404 Not Found",()=>{
        const newComment = {
            username: "rogersop",
            body: "wow this article shows the REAL truth that THE MAN is trying to hide from us"
        }
        return request(app).post("/api/articles/6522/comments").expect(404).send(newComment)
        .then(({body})=>{
            expect(body.msg).toBe("Not Found")
        })
    })
    
    test("400 /api/articles/:article_id/comments with missing parts of the body should return 400 bad request",()=>{
        const newComment = {
            body: "wow this article shows the REAL truth that THE MAN is trying to hide from us"
        }
        return request(app).post("/api/articles/4/comments").expect(400).send(newComment)
        .then(({body})=>{
            expect(body.msg).toBe("Bad Request")
        })
    })
    test("400 /api/articles/:article_id/comments with invalid body additions should return 400 bad request",()=>{
        const newComment = {
            body: "wow this article shows the REAL truth that THE MAN is trying to hide from us",
            potato:"aksdsa"
        }
        return request(app).post("/api/articles/4/comments").expect(400).send(newComment)
        .then(({body})=>{
            expect(body.msg).toBe("Bad Request")
        })
    })
    test("400 /api/articles/:article_id/comments with invalid username will return 400 bad request",()=>{
        const newComment = {
            username:"banana",
            body: "wow this article shows the REAL truth that THE MAN is trying to hide from us"
        }
        return request(app).post("/api/articles/4/comments").expect(400).send(newComment)
        .then(({body})=>{
            expect(body.msg).toBe("Bad Request")
        })
    })
})


describe("DELETE /api/comments/:comment_id",()=>{

    test("204: /api/comments/:comment_id should delete a comment if given valid comment_id",()=>{
        return request(app).delete("/api/comments/5").expect(204)
    })
    test("404: /api/comments/:comment_id should return a 404 if commend_id is a valid number but does not have a corresponding comment",()=>{
        return request(app).delete("/api/comments/420").expect(404)
        .then(({body})=>{
            expect(body.msg).toBe("Not Found")
        })
    })
    test("400: /api/comments/:comment_id should return a 400 if invalid comment_id is given",()=>{
        return request(app).delete("/api/comments/banana").expect(400)
        .then(({body})=>{
            expect(body.msg).toBe("Bad Request")
        })
    })

})

describe("GET /api/users",()=>{

    test("200: /api/users should return an array with all the users",()=>{
        return request(app).get("/api/users").expect(200)
        .then(({body})=>{
            expect(body.allUsers.length).toBe(4)
            body.allUsers.forEach((user)=>{
                expect(user).toHaveProperty("username", expect.any(String));
                expect(user).toHaveProperty("name", expect.any(String));
                expect(user).toHaveProperty("avatar_url", expect.any(String));
            })
        })
    })
})

describe("GET /api/users/:username",()=>{
    test("200 /api/users/:username should give an object of a specific user",()=>{
        return request(app).get("/api/users/icellusedkars").expect(200)
        .then(({body})=>{
            expect(body.user).toEqual(expect.objectContaining({
                username:"icellusedkars",
                name:"sam",
                avatar_url:"https://avatars2.githubusercontent.com/u/24604688?s=460&v=4"
            }))
        })

    })
    test("404 /api/users/:username if the user does not exist should return a not found",()=>{
        return request(app).get("/api/users/banana243!!").expect(404)
        .then(({body})=>{
            expect(body.msg).toBe("Not Found")
        })
    })
})

describe("PATCH /api/comments/:comment_id", ()=>{
    test("200 /api/comments/:comment_id should update votes if given valid body",()=>{
        return request(app).patch("/api/comments/2").send({inc_votes: 17}).expect(200)
        .then(({body})=>{
            expect(body.comment_id).toBe(2)
            expect(body.votes).toBe(31)
        })
    })
    test("200 /api/comments/:comment_id should update votes if given valid body even if value is negative",()=>{
        return request(app).patch("/api/comments/2").send({inc_votes: -27}).expect(200)
        .then(({body})=>{
            expect(body.comment_id).toBe(2)
            expect(body.votes).toBe(-13)
        })
    })
    test("400 /api/comments/:comment_id when given invalid body should return 400 bad request",()=>{
        return request(app).patch("/api/comments/2").send({banana:26}).expect(400)
        .then(({body})=>{
            expect(body.msg).toBe("Bad Request")
        })
    })
    test("400 /api/comments/:comment_id when given invalid body should return 400 bad request",()=>{
        return request(app).patch("/api/comments/2").send({inc_votes:"cornetto"}).expect(400)
        .then(({body})=>{
            expect(body.msg).toBe("Bad Request")
        })
    })
    test("404 /api/comments/:comment_id when given comment_id is valid but doesnt match any comments will return 404 not found",()=>{
        return request(app).patch("/api/articles/420").send({inc_votes:25}).expect(404)
        .then(({body})=>{
            expect(body.msg).toBe("Not Found")
        })
    })
})

describe("POST /api/articles",()=>{
    test("201 /api/articles should add a new article to the articles table if body is valid",()=>{
        const article = 
        {
            author:"butter_bridge",
            title:"Trees are the enemy and let ME tell you why",
            body:"The undeniable truth is that trees are and always have been the enemy. Did you know what 100% of people who have died have their deaths indirectly if not directly related to trees, YES! you read that correctly 100%. You see dear reader trees produce something called \"oxygen\" and it is an matter of fact that 100% of people who are dead today have at one point ingested this oxygen so i'll leave it up to you readers, if it is a FACT that 100% of people who have died from all of history have ingested this oxygen are the trees killing us? ",
            topic: "trees"
        }
    return request(app).post("/api/articles").send(article).expect(201)
    .then(({body})=>{
        expect(body.newArticle).toEqual(expect.objectContaining(
            {
                author:article.author,
                title:article.title,
                body:article.body,
                topic:article.topic
            }
        ))
        expect(body.newArticle).toHaveProperty("article_id", expect.any(Number));
        expect(body.newArticle).toHaveProperty("created_at", expect.any(String));
        expect(body.newArticle).toHaveProperty("votes", expect.any(Number));
        expect(body.newArticle).toHaveProperty("article_img_url", expect.any(String));
    })
    })
    test("400 /api/articles with missing parts of the body should return 400 bad request",()=>{
        const newArticle = {
            topic: "trees"
        }
        return request(app).post("/api/articles").expect(400).send(newArticle)
        .then(({body})=>{
            expect(body.msg).toBe("Bad Request")
        })
    })
    test("201 /api/articles with invalid body additions will have the additions ignored",()=>{
        const newArticle = {
            author:"butter_bridge",
            title:"new fruits on the horizon",
            body: "some random body here",
            topic:"trees",
            potato:"chips"
        
        }
        return request(app).post("/api/articles").expect(201).send(newArticle)
        .then(({body})=>{
            expect(body.newArticle).not.toHaveProperty("potato");
            expect(body.newArticle).toEqual(expect.objectContaining(
                {
                    author:newArticle.author,
                    title:newArticle.title,
                    body:newArticle.body,
                    topic:newArticle.topic
                }
            ))

        })
    })
    test("400 /api/articles with invalid username will return 400 bad request",()=>{
        const newArticle = {
            author:"banana",
            title:"new fruits on the horizon",
            body: "some random body here",
            topic:"trees"
        }
        return request(app).post("/api/articles/4/comments").expect(400).send(newArticle)
        .then(({body})=>{
            expect(body.msg).toBe("Bad Request")
        })
    })
})


describe("GET /api/articles?p=2", ()=>{
    test("200: /api/articles?p=2 should return all articles on page 2 with a default limit 10",()=>{
        return request(app).get("/api/articles?p=2").expect(200)
        .then(({body})=>{
            expect(body.articles.length).toBeGreaterThan(2)
        })
    })
    test("200: /api/articles?p=1 should return all articles on page 1 with a default limit 10",()=>{
        return request(app).get("/api/articles?p=1").expect(200)
        .then(({body})=>{
            expect(body.articles.length).toBe(10)
        })
    })
    test("400: /api/articles?p=banana if given invalid page number will return 400 bad request",()=>{
        return request(app).get("/api/articles?p=banana").expect(400)
        .then(({body})=>{
            expect(body.msg).toBe("Bad Request")
        })
    })
    test("200: /api/articles?p=200 should return 200 ok with an empty array since although there is no content on page 200 it is still a valid input",()=>{
        return request(app).get("/api/articles?p=200").expect(200)
        .then(({body})=>{
            expect(body.articles).toEqual([])
        })
    })
})

describe("GET /api/articles?limit=NUMBER",()=>{
    test("/api/articles?limit=5 should return 5 articles in an array",()=>{
        return request(app).get("/api/articles?limit=5").expect(200)
        .then(({body})=>{
            expect(body.articles.length).toBe(5)
        })
    })
    test("400: /api/articles?limit=banana if given invalid limit number will return 400 bad request",()=>{
        return request(app).get("/api/articles?limit=banana").expect(400)
        .then(({body})=>{
            expect(body.msg).toBe("Bad Request")
        })
    })
})

describe("GET /api/articles/:article_id/comments",()=>{
    test("/api/articles/:article_id/comments?p=2 will get all the comments on page 2 of the article comments where the default limit is 10", ()=>{
        return request(app).get("/api/articles/1/comments?p=2").expect(200)
        .then(({body})=>{
            expect(body.comments.length).toBeGreaterThan(0)
        })
    })
    test("/api/articles/:article_id/comments?limit=5 will get 5 comments which is the given limit", ()=>{
        return request(app).get("/api/articles/1/comments?limit=5").expect(200)
        .then(({body})=>{
            expect(body.comments.length).toBe(5)
        })
    })
    test("400: /api/articles/:article_id/comments?limit=banana if given invalid limit number will return 400 bad request",()=>{
        return request(app).get("/api/articles/:article_id/comments?limit=banana").expect(400)
        .then(({body})=>{
            expect(body.msg).toBe("Bad Request")
        })
    })
    test("400: /api/articles/:article_id/comments?p=banana if given invalid page input will return 400 bad request",()=>{
        return request(app).get("/api/articles/:article_id/comments?p=banana").expect(400)
        .then(({body})=>{
            expect(body.msg).toBe("Bad Request")
        })
    })
})

describe("POST /api/topics",()=>{
    test("201 /api/articles should add a new topic to the topic table if given body is valid",()=>{
        const topic = 
        {
            "slug": "farmers",
            "description": "all sunshine and crop circles"
        }
    return request(app).post("/api/topics").send(topic).expect(201)
    .then(({body})=>{
        expect(body.newTopic).toEqual(expect.objectContaining(
            {
                slug:topic.slug,
                description:topic.description
            }
        ))
    })
    })

    test("400 /api/topics with missing parts of the body should return 400 bad request",()=>{
        const newTopic = {
            "slug": "trees"
        }
        return request(app).post("/api/topics").expect(400).send(newTopic)
        .then(({body})=>{
            expect(body.msg).toBe("Bad Request")
        })
    })
})

describe("DELETE /api/articles/:article_id",()=>{

    test("204: /api/articles/:article_id should delete an article if given valid article_id",()=>{
        return request(app).delete("/api/articles/5").expect(204)
    })
    test("404: /api/articles/:article_id should return a 404 if article_id is a valid number but does not have a corresponding article",()=>{
        return request(app).delete("/api/articles/420").expect(404)
        .then(({body})=>{
            expect(body.msg).toBe("Not Found")
        })
    })
    test("400: /api/articles/:article_id should return a 400 if invalid article_id is given",()=>{
        return request(app).delete("/api/articles/banana").expect(400)
        .then(({body})=>{
            expect(body.msg).toBe("Bad Request")
        })
    })

})
